// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UITableView;
@class UIColor;
@class ImoTableViewSource;
@class NSCoder;
@class UITableViewCell;
@class UINib;
@class ImoTableViewCell;

SWIFT_CLASS("_TtC12ImoTableView12ImoTableView")
@interface ImoTableView : UIView <UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate>
@property (nonatomic, strong) UITableView * _Nonnull tableView;
/// Set the separator collor of table view
@property (nonatomic, strong) UIColor * _Nullable separatorColor;
/// Separator insset
@property (nonatomic) UIEdgeInsets separatorInset;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, copy) void (^ _Nullable didSelectSource)(ImoTableViewSource * _Nullable);
@property (nonatomic, copy) void (^ _Nullable didSelectCellAtIndexPath)(NSIndexPath * _Nonnull);
- (nonnull instancetype)initOn:(UIView * _Nonnull)view insets:(UIEdgeInsets)insets OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Give to table view number of rows in your section
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     tableView: UITableView
///   </li>
///   <li>
///     section: Section
///   </li>
/// </ul>
///
/// returns:
/// Number of rows in section
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (void)update;
- (ImoTableViewCell * _Nullable)statiCellWithCellClass:(NSString * _Nonnull)cellClass nib:(UINib * _Nullable)nib SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Register cell class for source
/// \param source ImoTableViewSource
///
- (void)registerCellClassForSourceWithSource:(ImoTableViewSource * _Nonnull)source;
/// Register cell class
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     cellClass: Cell class name, also this name is uniq identifier of the cell
///   </li>
///   <li>
///     nib: Cell nib
///   </li>
/// </ul>
- (void)registerCellClassWithCellClass:(NSString * _Nonnull)cellClass nib:(UINib * _Nullable)nib;
@end


@interface ImoTableView (SWIFT_EXTENSION(ImoTableView))
/// Did select row delegate
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     tableView: UITableView
///   </li>
///   <li>
///     indexPath: IndexPath
///   </li>
/// </ul>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Will call didSelectSource clossure if didSelectSource is not nill
/// \param source CellSource
///
- (void)didSelectWithSource:(ImoTableViewSource * _Nonnull)source;
/// Will call didSelectCellAtIndexPath clossure if didSelectCellAtIndexPath is not nill
/// \param indexPath IndexPath
///
- (void)didSelectCellAtIndexPathWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Perform selector
/// \param source ImoTableViewSource
///
- (void)performSelectorFor:(ImoTableViewSource * _Nonnull)source;
/// Perform selector
/// \param target Target
///
/// \param selector Selector
///
/// \param source CellSource
///
- (void)performSelectorWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)selector source:(ImoTableViewSource * _Nonnull)source;
@end

@class ImoTableViewSection;

@interface ImoTableView (SWIFT_EXTENSION(ImoTableView))
/// Add source in section
/// \param source CellSource
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)addWithSource:(ImoTableViewSource * _Nonnull)source in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Add array of sources in section
/// \param sources CellSource
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)addWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete source from section
/// \param source Source to delete
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)deleteWithSource:(ImoTableViewSource * _Nonnull)source in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete array of sources from section
/// \param sources Sources to delete
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)deleteWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Update source
/// \param source Source to update
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)updateWithSource:(ImoTableViewSource * _Nonnull)source in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Update array of sources
/// \param sources Sources to update
///
/// \param section Section
///
/// \param animated Animated update
///
/// \param animation Animation type
///
- (void)updateWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources in:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
- (void)updateWithSection:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Array of indexPaths for sources in section
/// \param sources Array of sources
///
/// \param section Section
///
///
/// returns:
/// Array of IndexPath
- (NSArray<NSIndexPath *> * _Nonnull)indexPathsForSourcesWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources in:(ImoTableViewSection * _Nonnull)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface ImoTableView (SWIFT_EXTENSION(ImoTableView))
/// Set table view contentInset and scrollIndicatorInsets to UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
- (void)zeroContentInsets;
/// Should or not adjust table content offest when keyboard apears on screen
/// \param should Bool
///
- (void)adjustContentInsetsForKeyboard:(BOOL)should;
/// Add observers
- (void)addKeyboardObservers;
/// Remove keyboard notifications observers
- (void)removeKeyboardObservers;
/// Keyboard will show notification
/// \param notification Notification
///
- (void)keyboardWillShow:(NSNotification * _Nonnull)notification;
/// Keyboard will hide notification
/// \param notification Notification
///
- (void)keyboardWillHide:(NSNotification * _Nonnull)notification;
/// Keyboard will hide notification
/// \param notification Notification
///
- (void)keyboardDidChangeFrame:(NSNotification * _Nonnull)notification;
/// Adjust scroll for notification
/// \param notification Notification
///
- (void)adjustScrollFor:(NSNotification * _Nonnull)notification;
/// Get UIEdgeInsets for keyboardFrame
/// \param keyboardFrame CGRect
///
///
/// returns:
/// UIEdgeInsets
- (UIEdgeInsets)insetsFor:(CGRect)keyboardFrame SWIFT_WARN_UNUSED_RESULT;
/// Get top view from window
///
/// returns:
/// most top view from window
- (UIView * _Nullable)mainView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)spaceBetwenLastCellAndTableBottom SWIFT_WARN_UNUSED_RESULT;
@end


@interface ImoTableView (SWIFT_EXTENSION(ImoTableView))
/// Add section
/// \param section Section
///
/// \param animated Animated or not
///
/// \param animation Animation type
///
- (void)addWithSection:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Add sections
/// \param sections Array of sections
///
/// \param animated Animated or not
///
/// \param animation Animation type
///
- (void)addWithSections:(NSArray<ImoTableViewSection *> * _Nonnull)sections animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete section at index
/// \param index Section index
///
/// \param animated Animated or not
///
/// \param animation Animation type
///
- (void)deleteSectionAt:(NSInteger)index animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete section
/// \param section Section
///
/// \param animated Animate or not
///
/// \param animation Animation type
///
- (void)deleteWithSection:(ImoTableViewSection * _Nonnull)section animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete sections
/// \param sections Array of Sections
///
/// \param animated Animate or not
///
/// \param animation Animation type
///
- (void)deleteWithSections:(NSArray<ImoTableViewSection *> * _Nonnull)sections animated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete all sections
/// \param animated Animate or not
///
/// \param animation Animation type
///
- (void)deleteAllSectionsWithAnimated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete first section from table
/// \param animated Animated or not
///
/// \param animation Animation type
///
- (void)deleteFirstSectionWithAnimated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Delete last section
/// \param animated Animated or not
///
/// \param animation Animation type
///
- (void)deleteLastSectionWithAnimated:(BOOL)animated animation:(UITableViewRowAnimation)animation;
/// Get fist section
///
/// returns:
/// Section if exist
- (ImoTableViewSection * _Nullable)firstSection SWIFT_WARN_UNUSED_RESULT;
/// Last section
///
/// returns:
/// Section if exist
- (ImoTableViewSection * _Nullable)lastSection SWIFT_WARN_UNUSED_RESULT;
/// Get section for given Index
/// \param index Section index
///
///
/// returns:
/// ImoTableViewSection?
- (ImoTableViewSection * _Nullable)sectionForIndexWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Get cell source for IndexPath
/// \param indexPath IndexPath
///
///
/// returns:
/// ImoTableViewSource?
- (ImoTableViewSource * _Nullable)cellSourceForIndexPathWithIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Animate insert section
/// \param section Section to insert
///
/// \param animation Animation type
///
- (void)animateInsertSection:(ImoTableViewSection * _Nonnull)section :(UITableViewRowAnimation)animation;
/// Animate insert sections
/// \param sections Array of sections
///
/// \param animation Animation type
///
- (void)animateInsertSections:(NSArray<ImoTableViewSection *> * _Nonnull)sections :(UITableViewRowAnimation)animation;
/// Animate delete sections
/// \param sections IndexSet of sections
///
/// \param animation Animation type
///
- (void)animateDeleteSections:(NSIndexSet * _Nonnull)sections :(UITableViewRowAnimation)animation;
/// Index set for sections
/// \param sections Array of sections
///
///
/// returns:
/// IndexSet
- (NSIndexSet * _Nonnull)indexSetForSectionsWithSections:(NSArray<ImoTableViewSection *> * _Nonnull)sections SWIFT_WARN_UNUSED_RESULT;
@end


/// ImoTableViewCell
SWIFT_CLASS("_TtC12ImoTableView16ImoTableViewCell")
@interface ImoTableViewCell : UITableViewCell
/// This function is called every time cell will be displayed on screen
/// \param source source:AnyObject
///
- (void)setUpWithSourceWithSource:(id _Nonnull)source;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Section hold all table sources, header and footer view
SWIFT_CLASS("_TtC12ImoTableView19ImoTableViewSection")
@interface ImoTableViewSection : NSObject
/// default is 40
@property (nonatomic) CGFloat estimatedHeaderHeight;
/// default is 40
@property (nonatomic) CGFloat estimatedFooterHeight;
/// Header UIView
@property (nonatomic, strong) UIView * _Nullable headerView;
/// Footer UIView
@property (nonatomic, strong) UIView * _Nullable footerView;
/// Header title
@property (nonatomic, copy) NSString * _Nullable headerTitle;
/// Footer title
@property (nonatomic, copy) NSString * _Nullable footerTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add new source in section
/// \param source CellSource
///
- (void)add:(ImoTableViewSource * _Nonnull)source target:(id _Nullable)target :(SEL _Nullable)selector;
/// Add array of sources
/// \param sources Cell Source
///
/// \param target Add source action to an target
///
/// \param selector Sellector for target
///
- (void)addWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources target:(id _Nullable)target :(SEL _Nullable)selector;
/// Get source from section specific index
/// \param index Source Index
///
///
/// returns:
/// ImoTableViewSource?
- (ImoTableViewSource * _Nullable)getWithSourceAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Delete source from section specific index
/// \param index Source Index
///
///
/// throws:
/// ImoTableViewSectionError
- (BOOL)deleteAtIndex:(NSInteger)index error:(NSError * _Nullable * _Nullable)error;
/// Check if section contain given index
/// \param index Index
///
///
/// returns:
/// Bool
- (BOOL)containIndexWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Delete source from section
/// \param source Source you want to delete
///
///
/// throws:
/// ImoTableViewSectionError
- (BOOL)delete:(ImoTableViewSource * _Nonnull)source error:(NSError * _Nullable * _Nullable)error;
/// Delete sources from section
/// \param source Source you want to delete
///
///
/// throws:
/// ImoTableViewSectionError
- (BOOL)deleteWithSources:(NSArray<ImoTableViewSource *> * _Nonnull)sources error:(NSError * _Nullable * _Nullable)error;
/// Delete all sources
- (void)deleteAll;
/// Last source if exist
///
/// returns:
/// CellSource
- (ImoTableViewSource * _Nullable)lastSource SWIFT_WARN_UNUSED_RESULT;
/// FirstSource if exist
///
/// returns:
/// CellSource
- (ImoTableViewSource * _Nullable)firstSource SWIFT_WARN_UNUSED_RESULT;
/// All sources
///
/// returns:
/// [CellSource]
- (NSArray<ImoTableViewSource *> * _Nonnull)allSources SWIFT_WARN_UNUSED_RESULT;
/// Sources count
///
/// returns:
/// Sources count
- (NSInteger)count SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;

SWIFT_CLASS("_TtC12ImoTableView18ImoTableViewSource")
@interface ImoTableViewSource : NSObject
/// Static cell
@property (nonatomic, strong) ImoTableViewCell * _Nullable staticCell;
/// Target to send messages to Selector from cell
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nullable selector;
@property (nonatomic, strong) id _Nullable object;
@property (nonatomic, strong) UINib * _Nullable nib;
/// Init source
/// \param cellClass Cell class / identifier
///
- (nonnull instancetype)initWithCellClass:(NSString * _Nonnull)cellClass OBJC_DESIGNATED_INITIALIZER;
/// Set nib bundle
- (void)setNibBundleWith:(NSBundle * _Nonnull)bundle;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIView (SWIFT_EXTENSION(ImoTableView))
- (void)edgesConstraintsTo:(UIView * _Nonnull)view insets:(UIEdgeInsets)insets;
@end


@interface UIViewController (SWIFT_EXTENSION(ImoTableView))
/// Hide keyboard when tapped around
- (void)hideKeyboardWhenTappedAround;
/// Dismiss Keyboard
- (void)dismissKeyboard;
@end

#pragma clang diagnostic pop
